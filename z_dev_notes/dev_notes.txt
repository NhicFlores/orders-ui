
nextjs upcoming release 
new api for tagging functions and specific tags 
for caching, so react knows what to check to re-render 

branching strategy and conventions 

environment configuration 
  dotenv 

code quality and style 
eslint and prettier configs

testing - Jest 

versioning dependencies 


------------------------------------ Web Dev Concepts ---------------------------------- 
Two environments code runs on: client and server 
  Client is browser on user device that sends requests to a server. 
  Server receives requests and sends responses back to client 

Request-Response Lifecycle 
-User Action: The user interacts with a web application. This could be clicking a link, 
submitting a form, or typing a URL directly into the browser's address bar.
-HTTP Request: The client sends an HTTP request to the server that contains necessary information 
about what resources are being requested, what method is being used (e.g. GET, POST), and additional data if necessary.
-Server: The server processes the request and responds with the appropriate resources. This process 
may take a couple of steps like routing, fetching data, etc.
-HTTP Response: After processing the request, the server sends an HTTP response back to the client. 
This response contains a status code (which tells the client whether the request was successful or not) and requested 
resources (e.g. HTML, CSS, JavaScript, static assets, etc).
-Client: The client parses the resources to render the user interface.
-User Action: Once the user interface is rendered, the user can interact with it, and the whole process starts again.

In web development, the Network Boundary is a conceptual line that separates the different environments. For example, 
the client and the server, or the server and the data store.

In React, you choose where to place the client-server network boundary wherever it makes the most sense.

Behind the scenes, the work is split into two parts: the client module graph and the server module graph. The server 
module graph contains all the components that are rendered on the server, and the client module graph contains all 
components that are rendered on the client.

It may be helpful to think about module graphs as a visual representation of how files in your application depend on each other.

You can use the React "use client" convention to define the boundary. There's also a "use server" convention, which 
tells React to do some computational work on the server.

------------------------------------ REACT CORE ------------------------------------
React 

Props
To collect data from multiple children, or to have two child components communicate with each other, declare the shared state in their parent component instead. The parent component can pass that state back down to the children via props. This keeps the child components in sync with each other and with their parent.

State
When you call a set function in a component, React automatically updates the child components inside

 state is private to a component that defines it, you cannot update the Parent's state directly from the Child component 

define function in parent component, pass that function to child as a prop 

Calling the 'setState' function lets React know the state of the component has changed. This will trigger a re-render of the components that use the 'state' state as well as its child components

Avoid storing redundant state: can one state be calculated from another?  

Keys 
When a list is re-rendered, React takes each list item’s key and searches the previous list’s items for a matching key. If the current list has a key that didn’t exist before, React creates a component. If the current list is missing a key that existed in the previous list, React destroys the previous component. If two keys match, the corresponding component is moved.

Keys tell React about the identity of each component, which allows React to maintain state between re-renders. If a component’s key changes, the component will be destroyed and re-created with a new state.

key is a special and reserved property in React. When an element is created, React extracts the key property and stores the key directly on the returned element. Even though key may look like it is passed as props, React automatically uses key to decide which components to update. There’s no way for a component to ask what key its parent specified.

It’s strongly recommended that you assign proper keys whenever you build dynamic lists. If you don’t have an appropriate key, you may want to consider restructuring your data so that you do.

Array Index as Key 
If no key is specified, React will report an error and use the array index as a key by default. Using the array index as a key is problematic when trying to re-order a list’s items or inserting/removing list items. Explicitly passing key={i} silences the error but has the same problems as array indices and is not recommended in most cases.

Keys do not need to be globally unique; they only need to be unique between components and their siblings.

Functional Components 
Remember to use Functional components only when there are no dependencies between components or there aren't many! 

Components: 
since components are functions -> you can modify what parameters they take and what they return 
can be defined as classes, 


------------------------------------ NextJS ------------------------------------
routing conventions 
creating a folder with parenthesis allows you to create a shared layout, without adding another segment to the URL 
app -> auth -> login -->> localhost:3000/auth/login 
app -> (auth) -> login -->> localhost:3000/login 
_foldername: the '_' tells nextjs to omit this route 

Server Actions are not limited to <form> and can be invoked from event handlers, useEffect, third-party libraries, and other form elements like <button> 


Server actions 
Good to know: In HTML, you'd pass a URL to the action attribute. This URL would be the destination where your form data should be submitted (usually an API endpoint).

However, in React, the action attribute is considered a special prop - meaning React builds on top of it to allow actions to be invoked.

Behind the scenes, Server Actions create a POST API endpoint. This is why you don't need to create API endpoints manually when using Server Actions.

How are actions handled differently than an async fetch function? look at data and actions files 

how is FormData something we have access to but don't explicitly pass in an action  

Props from layout to Page components 
- what is the purpose of the [key: string]: any; in 
type ChildComponentProps = 
  { 
    updateSelections?: (selection: string) => void; 
    [key: string]: any; 
  };
- The [key: string]: any; line in the ChildComponentProps type definition is an index signature. 
In TypeScript, an index signature is used to describe objects that might have an unknown number of properties of a certain type.
- In this case, [key: string]: any; means that in addition to the updateSelections property, a ChildComponentProps object can have any number of 
additional properties, as long as their keys are strings. The type of these additional properties is any, which means they can be of any type.
- This is useful when you want to allow flexibility in the objects that can be used as ChildComponentProps, while still 
enforcing that certain properties (like updateSelections) exist.

Image 
statically import the image: import Logo from 'logo path';
  - here the image file is stored next ot the component from where it is imported.
  during build, nextjs will move it to dist folder, detemine width and height, 
  and set it to the component. this helps avoid layout shift during image loading 
  - Warning: Dynamic await import() or require() are not supported. 
  The import must be static so it can be analyzed at build time.
a path string: 
  - here nextjs thinks this is a remote image and it should be loaded from either next public 
  folder or some remote location. in this case height and width must be set manually or 
  configure remote patterns if you want to enable image next optimization 
https://stackoverflow.com/questions/78439844/import-images-vs-include-them-inline-nextjs 



auth 
middleware 
middleware is not nextauth specific, it is nextjs specific 
Adding auth to your Middleware is optional, but recommended to keep the user session alive.
https://nextjs.org/docs/app/building-your-application/routing/middleware#matcher 


<SessionProvider> must wrap the children using useSession() - however all pages in the 
layout using <SessionProvider> must be server components - 


------------------------------------ TypeScript ------------------------------------
similar to unwrapping in swift 
profile && profile.company ? profile.company : "blank" 

classes vs types for data modeling - declarative code 

classes 
imperative code describes the steps that the runtime must take to inialize an object
declarative code describes the state of the initialized object

How we instantiated const user: User = { above 
is declarative; we're declaring the object in its full state. 
Imperative code, on the other hand, declares the object, then describes all of the steps to build it: 

immutable practices
You can't really even test test a unit. It might work in a unit test without the other parts, but if other parts modify it, then your test is useless. 
It becomes impossible to even identify all of the code paths. 
Conversely, code using immutable practices grows in complexity linearly. 
This piece always takes this value in and sends that value out. Tested, done, and on to the next part.

{...rest} used in props 
rest is not a property that you define in your interface. Typescript automatically infers the type from the remainder properties (those you don't include in your destructure syntax


------------------------------------ JavaScript ------------------------------------
.slice() can be used to create a copy of an array 
nextSquares = Squares.slice()

Immutability makes complex features much easier to implement. Later in this tutorial, you will implement a “time travel” feature that lets you review the game’s history and “jump back” to past moves. This functionality isn’t specific to games—an ability to undo and redo certain actions is a common requirement for apps. Avoiding direct data mutation lets you keep previous versions of the data intact, and reuse them later.

There is also another benefit of immutability. By default, all child components re-render automatically when the state of a parent component changes. This includes even the child components that weren’t affected by the change. Although re-rendering is not by itself noticeable to the user (you shouldn’t actively try to avoid it!), you might want to skip re-rendering a part of the tree that clearly wasn’t affected by it for performance reasons. Immutability makes it very cheap for components to compare whether their data has changed or not. You can learn more about how React chooses when to re-render a component in the memo API reference.

when creating new arrays we can use the spreader operator 
- You can read the ...history spread syntax as “enumerate all the items in array”.

JavaScript supports closures which means an inner function (e.g. handleClick) has access to variables and functions defined in a outer function (e.g. Board). The handleClick function can read the squares state and call the setSquares method because they are both defined inside of the Board function - to my understanding, 'closures' is what allows nested functions to access the constants and states defined in the outer function 

when passing functions, you just pass the name. when you include the parenthesis function() you are calling it. This can cause infinite loops when calling functions instead of passing them when trying to pass them as props, causing the component to re-render, which changes the state, which triggers another re-render and so on 

when passing a function as a prop, and you need a parameter, use arrow functions so as not to call the function when rendering the component 
the code after the => “arrow” will run, calling handleClick(0).
so instead of <Component value={someValue} onClick={handleClick(0)} >
use arrow function 
 <Component value={someValue} onClick={() => handleClick(0)} >


------------------------------------ JSX ------------------------------------
wrap elements in Link, rather than putting Link in an element: this way, if you put a button in a link, the whole button is clickable 
  this was how I resolved the Edit Order button bug 

<form> has: input, dropdown, input of type number and radio, cancel, and submit 

<><>: fragments can be used to avoid unnecessarily adding extra nodes to the DOM 


------------------------------------- PostgreSQL ---------------------------------------- 
issue where my update billing info wasn't working: adding the billing_addr field to the update sql statement 
would stop it from updating but no errors were thrown. 
- fix : PostgreSQL expects the update to be a string not a tuple so I had to update my syntax in createBillingInfo form 


------------------------------------ Data fetching ------------------------------------
type sql queries - edefault seems to be 'query result row'
when some components like datatable, and columns definitions are expecting an 
order, the sql query needs to be typed 
ex. await sql<Order>`sql statement`;

------------------------------------ Zod - form validation ------------------------------------
.partial is a method that can make all properties optional 
ex. const partialUser = user.partial();
can also specify which properties to make optional 
.required makes every property required 

------------------------------------ Auth ------------------------------------

JWT vs Session(cookies)
Session 
In the session based authentication, the server will create a session for 
the user after the user logs in. The session id is then stored on a 
cookie on the user’s browser. While the user stays logged in, the cookie 
would be sent along with every subsequent request. The server can then 
compare the session id stored on the cookie against the session information 
stored in the memory to verify user’s identity and sends response 
with the corresponding state!

JWT 
Many web applications use JSON Web Token (JWT) instead of sessions for 
authentication. In the token based application, the server creates JWT 
with a secret and sends the JWT to the client. The client stores 
the JWT (usually in local storage) and includes JWT in the header 
with every request. The server would then validate the JWT with 
every request from the client and sends response.

The biggest difference here is that the user’s state is not stored on the server, 
as the state is stored inside the token on the client side instead. 
Most of the modern web applications use JWT for authentication for reasons 
including scalability and mobile device authentication.

If we expect a lot of users, or want to minimize load on the server, use toke 
authentication, since the token is stored on the client side 

Care must be taken to ensure only the necessary information is included in 
JWT and sensitive information should be omitted to prevent XSS security attacks.

https://sherryhsu.medium.com/session-vs-token-based-authentication-11a6c5ac45e4


https://stytch.com/blog/jwts-vs-sessions-which-is-right-for-you/ 


------------------------------------ Authjs ------------------------------------ 
TODO: in what case do we need export const runtime = "edge" 

middleware 
middleware is not nextauth specific, it is nextjs specific 
Adding auth to your Middleware is optional, but recommended to keep the user session alive. 

from edge compatibility section 
https://authjs.dev/getting-started/migrating-to-v5 

While Auth.js strictly uses standard Web APIs (and thus can run in any 
environment that supports them), some libraries or ORMs 
(Object-Relational Mapping) packages that you rely on might not be ready yet. 
In this case, you can split the auth configuration into multiple files.

Auth.js supports two session strategies. When you are using an adapter, 
it will default to the database strategy. Unless your database and its 
adapter is compatible with the Edge runtime/infrastructure, you will not be 
able to use the "database" session strategy.

So for example, if you are using an adapter that relies on an ORM/library that
is not yet compatible with Edge runtime(s) below is an example where we 
force the jwt strategy and split up the configuration so the library 
doesn’t attempt to access the database in edge environments, 
like in the middleware.

when using an ORM/library that is not edge compatible, we will not have access to callbacks 
and events in the auth.ts file, which we normally would be able to use if our db was compatible 
with the edge.  NextJS Middleware works on the edge, and so if you want to use Middleware and 
somethihng like Prisma, which is not edge compatible, we have to separate auth.ts into two files:
auth.ts and auth.config.ts ------------- 05-08-2024
-----------------------
EX: Create an auth.config.ts file which exports an object containing your Auth.js configuration options. 
You can put all common configuration here which does not rely on the adapter. 
Notice this is exporting a configuration object only, we’re not calling NextAuth() here.
----
due to prisma's incompatability with edge, this is the file 
that triggers the nextjs middleware 
while auth.ts uses prisma adapter 

auth.config.ts 
import GitHub from "next-auth/providers/github"
import type { NextAuthConfig } from "next-auth"
 
export default { providers: [GitHub] } satisfies NextAuthConfig

server side login uses redirect() client side login uses callbackURL()
--------------------------
EX: 
Next, create an auth.ts file and add your adapter and the jwt session strategy there. 
This is the auth.ts configuration file you will import from in the rest of your application, other than in the middleware.
auth.ts 
import NextAuth from "next-auth"
import { PrismaAdapter } from "@auth/prisma-adapter"
import { PrismaClient } from "@prisma/client"
import authConfig from "./auth.config"
 
const prisma = new PrismaClient()
 
export const { handlers, auth } = NextAuth({
  adapter: PrismaAdapter(prisma),
  session: { strategy: "jwt" },
  ...authConfig,
})  ------------- 05-08-2024 

------------------------------------ URL ------------------------------------
absolute URL
NextURL 
paths 
protected routes 
URL constructor 


------------------------------------ styling ------------------------------------ 

use h-screen instead of h-full

background image - can set to scroll or be fixed 

- CSS 
absolute units like cm, mm, in, pt, and pc should not be used: they are only effective for very high definition devices 

stick to rem, em, px, and % 
vw - 1/100 of window's width 
vh - 1/100 of window's height 

padding, the space around the content. In the example below, it is the space around the paragraph text.
border, the solid line that is just outside the padding.
margin, the space around the outside of the border.

Something else you might like to try is styling a paragraph when it comes directly after a heading at the 
same hierarchy level in the HTML. To do so, place a + (an next-sibling combinator) between the selectors. 

/* selects any <span> that is inside a <p>, which is inside an <article>  */
article p span {
}

/* selects any <p> that comes directly after a <ul>, which comes directly after an <h1>  */
h1 + ul + p {
}

- css functions 
some properties have functions you can use for values such as: 
width: calc() 
transform: rotate(), 
color: rgb()
background-image: gradient()

@rules (at-rules)
provide instruction for behavior such as conditional styling 
@import can import a stylesheet into another stylesheet 
@media is used to create media queries for conditional styling 
for browser viewports wider than 30 em, apply a blue background: 
@media (min-width: 30em) {
  body {
    background-color: blue;
  }
}

can set fallback styles by defining them earlier in ruleset 
.box {
  width: 500px; //if a browser doesn't support calc, then it'll fall back to 500px 
  width: calc(100% - 50px);
}

not sure if this applies to css in react or through tailwind 
Warning: One less obvious aspect of using CSS shorthand is how omitted values reset. A value not specified in CSS shorthand 
reverts to its initial value. This means an omission in CSS shorthand can override previously set values.

- DOM is where your CSS and the document's content meet up 


------------------------------------ Debugging -----------------------------------

------------------------------------ CLI ------------------------------------ 
specify port 
PORT 4000 npm run dev 

------------------------------------ Security ------------------------------------
bcrypt 
incorporating a salt to protect against rainbow table attacks 

--------------------------------------- Git ---------------------------------------

git error: cannot lock ref ''
i created a new branch auth/auth-proviers and when i tried to push or publish the branch 
i got the cannot lock ref error. it didn't like my auth/ ref because on remote the auth/
folder didn't exist but there was a branch named auth and the refs were getting mixed up 
I deleted the auth branch from remote, ran git remote prune origin, then tried to push 
and set upstream for auth/auth-providers and it worked 