
ISSUE: 

 тип ./node_modules/@mapbox/node-pre-gyp/lib/util/nw-pre-gyp/index.html
Module parse failed: Unexpected token (1:0)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
> <!doctype html>
| <html>
| <head>

Import trace for requested module:
./node_modules/@mapbox/node-pre-gyp/lib/util/nw-pre-gyp/index.html
./node_modules/@mapbox/node-pre-gyp/lib/ sync ^\.\/.*$
./node_modules/@mapbox/node-pre-gyp/lib/node-pre-gyp.js
./node_modules/bcrypt/bcrypt.js
./actions/register.ts
./components/auth/register-form.tsx

looking at stackoverflow, threads on npm and nextjs github pages, and reddit threads, most people were saying it was a node module issue.
The suggestion was to install the latest versions of npm and node 

FIX: 
tag the file using bcrypt as a server component 'use server 'I was using bcrypt in server actions, but I hadn't tagged the file with the 'use server' tag 
https://github.com/kelektiv/node.bcrypt.js/issues/979 


after adding form validation with safeParse in authentication server action I got this error in the useFormStatus hook 

No overload matches this call.
  Overload 1 of 2, '(action: (state: "Invalid Credentials" | "Something went wrong." | { error: ZodError<{ email: string; password: string; }>; } | undefined) => "Invalid Credentials" | "Something went wrong." | { ...; } | Promise<...> | undefined, initialState: "Invalid Credentials" | ... 2 more ... | undefined, permalink?: string | undefined): [state: ...]', gave the following error.
    Argument of type '(prevState: string | undefined, formData: FormData) => Promise<"Invalid Credentials" | "Something went wrong." | { error: ZodError<{ email: string; password: string; }>; } | undefined>' is not assignable to parameter of type '(state: "Invalid Credentials" | "Something went wrong." | { error: ZodError<{ email: string; password: string; }>; } | undefined) => "Invalid Credentials" | "Something went wrong." | { ...; } | Promise<...> | undefined'.
      Target signature provides too few arguments. Expected 2 or more, but got 1.
  Overload 2 of 2, '(action: (state: "Invalid Credentials" | "Something went wrong." | { error: ZodError<{ email: string; password: string; }>; } | undefined, payload: FormData) => "Invalid Credentials" | "Something went wrong." | { ...; } | Promise<...> | undefined, initialState: "Invalid Credentials" | ... 2 more ... | undefined, permalink?: string | undefined): [state: ...]', gave the following error.
    Argument of type '(prevState: string | undefined, formData: FormData) => Promise<"Invalid Credentials" | "Something went wrong." | { error: ZodError<{ email: string; password: string; }>; } | undefined>' is not assignable to parameter of type '(state: "Invalid Credentials" | "Something went wrong." | { error: ZodError<{ email: string; password: string; }>; } | undefined, payload: FormData) => "Invalid Credentials" | "Something went wrong." | { ...; } | Promise<...> | undefined'.
      Types of parameters 'prevState' and 'state' are incompatible.
        Type '"Invalid Credentials" | "Something went wrong." | { error: ZodError<{ email: string; password: string; }>; } | undefined' is not assignable to type 'string | undefined'.
          Type '{ error: z.ZodError<{ email: string; password: string; }>; }' is not assignable to type 'string'.ts(2769)

after creating the auth-merge branch and resetting the commits to have one 
clean commit go into dev then main, i got the following error in the browser 
after trying to sign in a new user. I got the credentials wrong, then tried again 
and the browser showed the following build error. 
next time I'll make sure to copy the build stack as well 



TypeError: originalFactory is undefined

i was unable to recreate the error. I looked it up and didn't find anything useful 

i ran npm i just to see if it was a module thing since i had merged a bunch of commits 
into the dev branch. it didn't show any updates or changes. I tried again and wasn't able 
to recreate it. I went ahead and merged to main. there were no build errors in main, 
or any of the preview deployments for the dev, auth, or register-user branches 

in the client i was getting the ClientFetchError: Unexpected token '<', "<!DOCTYPE "... is not valid JSON
which means my function was expecting JSON and received HTML. 
The reason I was getting html was because I was getting receiving a 404 page not found but I wasn't 
handling the error correctly. GET /api/auth/session 404 was in the server logs. 
i was getting a 404 when using await auth() in a layout because that was an asynchronous call in a 
synchronous component which is why I kept getting null sessions. 
- copilot 
i am working on implementing authentication and protected routes in my nextjs app. In my profile page, 
I import auth from "@auth" and I use 'const session = await auth();' to get the session. When I move this to the layout.tsx, 
I get the a 404 error form auth(). Why doesn't await auth() work in the layout?
The issue you're facing is due to the fact that you're trying to use an asynchronous operation (await auth()) inside a 
synchronous React component (MainLayout). React components are synchronous and cannot be made asynchronous with async.

In React, data fetching should be done in specific lifecycle methods or hooks. For functional components, you can 
use the useEffect hook for side effects, including data fetching. However, useEffect runs after the component has been rendered, 
so it's not suitable for fetching authentication status before rendering the component.

In Next.js, you can use getServerSideProps or getInitialProps for server-side data fetching, but these can only be used in 
page components, not in layout or other regular components.

If you want to fetch the session data in the layout component, you can use the useSession hook from next-auth/react. 
This hook returns an object with data and status properties. The data property contains the session data if a session exists, 
and status indicates the loading state of the session data.

- The error message "TypeError: updateSelections is not a function" typically means that the updateSelections prop is either not being passed to the child component or it's being overwritten somewhere in the child component.

Here are a few things you can check:

Ensure that updateSelections is being passed down to each child component correctly. In each component where you're passing updateSelections as a prop, make sure you're passing it like this: <ChildComponent updateSelections={updateSelections} />.

Check that updateSelections is not being overwritten in any of the child components. If there's any other prop or variable in the child component with the same name, it could be overwriting the updateSelections prop.

Make sure that you're not calling updateSelections in a place where it could be undefined. For example, if you're calling updateSelections in a lifecycle method or a callback that gets executed before the component receives the updateSelections prop, it could be undefined at the time it's called.

Add some console logs to check the value of updateSelections in each component. This can help you figure out where it's becoming undefined or not a function.

- common fix - hook is being used in a server component. include the 'use client' directive at the top of the component to get rid of this error 



ISSUE: 
- when I change a dropdown value, this function is called. However, it is not updating the values appropriately. 
I have some console.log statements to monitor the values as the change. What I observe in the console.logs is that the 
dimensions array is always in the previous state. If I update a value, the change doesn't show up until I update another value. 

  function handleDimensionChange(
    label: string,
    value: string,
    isFraction: boolean
  ) {
    console.log(label, value, isFraction);
    console.log(dimensions);
    setDimensions((prev) =>
      prev.map((dimension) =>
        dimension.label === label
          ? isFraction
            ? { ...dimension, fraction: value }
            : { ...dimension, wholeNumber: value }
          : dimension
      )
    );
    console.log(dimensions);
    dimensions.forEach(({ label, wholeNumber, fraction }) => {
      handleSelection(`${label}: ${wholeNumber} ${fraction}`)
    })
  }

FIX: 
- The issue you're experiencing is due to the asynchronous nature of the setState function in React. When you call setDimensions, it 
schedules an update to the dimensions state variable, but it doesn't immediately update the variable. This means that when you log 
dimensions immediately after calling setDimensions, it logs the old state, not the updated state.
- The setDimensions function also doesn't return the new state, so you can't assign its result to a variable and log that.
- To work with the updated state immediately after it's set, you can use the state update function inside the setDimensions call. 
function handleDimensionChange(
  label: string,
  value: string,
  isFraction: boolean
) {
  console.log(label, value, isFraction);
  console.log(dimensions);
  setDimensions((prev) => {
    const updatedDimensions = prev.map((dimension) =>
      dimension.label === label
        ? isFraction
          ? { ...dimension, fraction: value }
          : { ...dimension, wholeNumber: value }
        : dimension
    );
    console.log(updatedDimensions);
    updatedDimensions.forEach(({ label, wholeNumber, fraction }) => {
      handleSelection(`${label}: ${wholeNumber} ${fraction}`)
    });
    return updatedDimensions;
  });
}

ISSUE: 
- Cannot update a component (`ProductContextProvider`) while rendering a different component (`DimensionsCard`). 
To locate the bad setState() call inside `DimensionsCard`, follow the stack trace as described ... long error output 

here is the function that triggered it 
  function handleDimensionChange(
    label: string,
    value: string,
    isFraction: boolean
  ) {
    console.log("--------- Dimension Change ---------")
    console.log(label, value, isFraction);
    console.log(dimensions);
    setDimensions((prev) => {
      const newDimensions = prev.map((dimension) => {
        if (dimension.label === label) {
          if (isFraction) {
            return { ...dimension, fraction: value };
          } else {
            return { ...dimension, wholeNumber: value };
          }
        }
        return dimension;
      });
      console.log("--------- New Dimensions ---------")
      console.log(newDimensions);
      newDimensions.forEach(({ label, wholeNumber, fraction }) => {
        handleSelection(`${label}: ${wholeNumber} ${fraction}`)
      })
      return newDimensions;
    });
  }

  function handleSave() {
    console.log(dimensions);
    const dimensionStrings = dimensions.map(
      (dimension) => `${dimension.wholeNumber} ${dimension.fraction}`
    );
    console.log(dimensionStrings);
    handleSelection(dimensionStrings.join(" x "));
  }


ISSUE: infinite rerenders:

THREAD
- prompt  
when I change a dropdown value, this function is called. However, it is not updating the values appropriately. 
I have some console.log statements to monitor the values as the change. What I observe in the console.logs is 
that the dimensions array is always in the previous state. If I update a value, the change doesn't show up until I 
update another value. What could be causing this issue in the following function:

function handleDimensionChange( label: string, value: string, isFraction: boolean ) 
{ 
  console.log(label, value, isFraction); 
  console.log(dimensions); 
  setDimensions((prev) => 
    prev.map((dimension) => 
      dimension.label === label 
        ? isFraction 
          ? { ...dimension, fraction: value } 
          : { ...dimension, wholeNumber: value } 
        : dimension 
      ) 
    ); 
    console.log(dimensions); 
    dimensions.forEach(({ label, wholeNumber, fraction }) => { 
      handleSelection(${label}: ${wholeNumber} ${fraction}) 
    }) 
}
- response 
The issue you're experiencing is due to the asynchronous nature of the setState function in React. When you call setDimensions, it 
schedules an update to the dimensions state variable, but it doesn't immediately update the variable. This means that when you log 
dimensions immediately after calling setDimensions, it logs the old state, not the updated state.

The setDimensions function also doesn't return the new state, so you can't assign its result to a variable and log that.

To work with the updated state immediately after it's set, you can use the state update function inside the setDimensions call. 
Here's how you can modify your code:

function handleDimensionChange(
  label: string,
  value: string,
  isFraction: boolean
) {
  console.log(label, value, isFraction);
  console.log(dimensions);
  setDimensions((prev) => {
    const updatedDimensions = prev.map((dimension) =>
      dimension.label === label
        ? isFraction
          ? { ...dimension, fraction: value }
          : { ...dimension, wholeNumber: value }
        : dimension
    );
    console.log(updatedDimensions);
    updatedDimensions.forEach(({ label, wholeNumber, fraction }) => {
      handleSelection(`${label}: ${wholeNumber} ${fraction}`)
    });
    return updatedDimensions;
  });
}

- prompt 
i am getting the following error after updating the handleDimensionChange function:

page.tsx:11 Warning: Cannot update a component (ProductContextProvider) while rendering a different component (DimensionsCard). 
To locate the bad setState() call inside DimensionsCard .... 

- response 
The error message is indicating that you're trying to update a state (handleSelection) while rendering a different component (DimensionsCard). 
This is a result of calling handleSelection inside the setDimensions state update function.

In React, it's not recommended to cause side effects (like calling handleSelection) inside the state update function passed to 
setState (or setDimensions in your case). This is because React may choose to delay state updates for performance reasons, and 
causing side effects in the state update function can lead to unexpected behavior.

To fix this issue, you can move the call to handleSelection inside a useEffect hook that depends on dimensions. 
Here's how you can modify your code:

function handleDimensionChange(
  label: string,
  value: string,
  isFraction: boolean
) {
  console.log("--------- Dimension Change ---------")
  console.log(label, value, isFraction);
  console.log(dimensions);
  setDimensions((prev) => {
    const updatedDimensions = prev.map((dimension) => 
      dimension.label === label
        ? isFraction
          ? { ...dimension, fraction: value }
          : { ...dimension, wholeNumber: value }
        : dimension
      );
    console.log("--------- New Dimensions ---------")
    console.log(updatedDimensions);
    return updatedDimensions;
  });
}

useEffect(() => {
  dimensions.forEach(({ label, wholeNumber, fraction }) => {
    handleSelection(`${label}: ${wholeNumber} ${fraction}`)
  })
}, [dimensions, handleSelection]);


infinite rerenders after adding handleSelection to dependency array: 
this is the component where handleSelection is defined. What are some reasons handleSelection is getting re-rendered? 

"use client";
import DimensionsCard from '@/components/product-components/DimensionsCard'
import { useProductContext } from '@/components/product-components/product-context-provider'
import ProductHeader from '@/components/product-components/product-header'
import { ShapeRoute, TintRoute } from '@/routes'
import { useCallback } from 'react';

const DimensionsPage = () => {

  const { order, setSummaryCard } = useProductContext();
  const handleSelection = (dimensionString: string) => {
    setSummaryCard((prev) => ({
      ...prev,
      orderSpec: {
        ...prev.orderSpec,
        glassSize: dimensionString,
      }
    }))
  };

  //get selected shape from order
  const { glass_shape } = order.glassConfig;

  return (
    <div className='container mx-auto p-4'>
      <ProductHeader title="Enter Dimensions" backRoute={ShapeRoute.href} continueRoute={TintRoute.href} />
      <div className='flex justify-center'>
        <DimensionsCard shape={glass_shape} handleSelection={handleSelection}/>
      </div>
    </div>
  )
}

export default DimensionsPage


- response 
In your DimensionsPage component, handleSelection is defined inside the component function. This means that a new handleSelection 
function 
is 
created every 
time 
DimensionsPage re-renders.

If DimensionsPage re-renders frequently, this could cause handleSelection to have a new identity on each render. 
When handleSelection is passed as a prop to DimensionsCard, this can cause DimensionsCard to re-render unnecessarily.

To prevent this, you can wrap handleSelection in the useCallback hook. This will return a memoized version of 
handleSelection that only changes if its dependencies change. In this case, the dependency is setSummaryCard, so you 
should include it in the dependency array of useCallback.

This way, handleSelection will have the same reference until setSummaryCard changes, which should not happen as setSummaryCard is 
stable and doesn't change across re-renders. This will prevent unnecessary re-renders of DimensionsCard.

Here's how you can modify your code:
const handleSelection = useCallback((dimensionString: string) => {
  setSummaryCard((prev) => ({
    ...prev,
    orderSpec: {
      ...prev.orderSpec,
      glassSize: dimensionString,
    }
  }))
}, [setSummaryCard]);


- prompt 
setSummaryCard is a setState function. Could that be causing the rerenders? 

- response 
Yes, setSummaryCard is a function returned by the useState hook, and it does not change across re-renders. However, the 
handleSelection function, which uses setSummaryCard, is defined inside your component and gets recreated on every render.

When you pass handleSelection to useCallback with an empty dependency array, it means that the memoized version will never 
update because you've told React that the function doesn't depend on any values from the component scope. But in this case, 
handleSelection does depend on setSummaryCard.

So, you should include setSummaryCard in the dependency array of useCallback. 

This way, handleSelection will have the same reference until setSummaryCard changes, which should not happen as setSummaryCard is 
stable and doesn't change across re-renders. This will prevent unnecessary re-renders of DimensionsCard.



--issue 
trying to save new shipping address from form in checkout page 
had the server action in the submit handler, had the submit handler 
hooked up to the form onSubmit={shippingForm.handleSubmit(handleFormSave)}

i put logs in the server action and the client side submit handler 
but i was getting no errors, or logs, and it wasn't submitting 

I checked the schema, and there was a field that wasn't optional 
but i also didn't have a ui element hooked up to it yet so there 
was nothing listening to an error from the schema 

I just made the field optional and it went through 

--issue 
i was trying to save the shipping info but the only part of the shipping address 
that was showing up in the database was the country. I played around with it 
and found that the way i was passing the values to the query string resulted 
in only the last value being stored 
    await sql`
            INSERT INTO shipping_info (user_id, delivery_addr, is_job_site, note)
            VALUES (${user_id}, 
                ${
                  (delivery_addr.street,
                  delivery_addr.apt_num,
                  delivery_addr.city,
                  delivery_addr.state,
                  delivery_addr.zip,
                  delivery_addr.country,)
                }, 
                ${is_job_site}, 
                ${note})
        `;
the fix was to stringify the address object and deserialize it in fetch function 