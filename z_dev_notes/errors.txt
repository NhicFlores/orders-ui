
ISSUE: 

 тип ./node_modules/@mapbox/node-pre-gyp/lib/util/nw-pre-gyp/index.html
Module parse failed: Unexpected token (1:0)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
> <!doctype html>
| <html>
| <head>

Import trace for requested module:
./node_modules/@mapbox/node-pre-gyp/lib/util/nw-pre-gyp/index.html
./node_modules/@mapbox/node-pre-gyp/lib/ sync ^\.\/.*$
./node_modules/@mapbox/node-pre-gyp/lib/node-pre-gyp.js
./node_modules/bcrypt/bcrypt.js
./actions/register.ts
./components/auth/register-form.tsx

looking at stackoverflow, threads on npm and nextjs github pages, and reddit threads, most people were saying it was a node module issue.
The suggestion was to install the latest versions of npm and node 

FIX: 
tag the file using bcrypt as a server component 'use server 'I was using bcrypt in server actions, but I hadn't tagged the file with the 'use server' tag 
https://github.com/kelektiv/node.bcrypt.js/issues/979 


after adding form validation with safeParse in authentication server action I got this error in the useFormStatus hook 

No overload matches this call.
  Overload 1 of 2, '(action: (state: "Invalid Credentials" | "Something went wrong." | { error: ZodError<{ email: string; password: string; }>; } | undefined) => "Invalid Credentials" | "Something went wrong." | { ...; } | Promise<...> | undefined, initialState: "Invalid Credentials" | ... 2 more ... | undefined, permalink?: string | undefined): [state: ...]', gave the following error.
    Argument of type '(prevState: string | undefined, formData: FormData) => Promise<"Invalid Credentials" | "Something went wrong." | { error: ZodError<{ email: string; password: string; }>; } | undefined>' is not assignable to parameter of type '(state: "Invalid Credentials" | "Something went wrong." | { error: ZodError<{ email: string; password: string; }>; } | undefined) => "Invalid Credentials" | "Something went wrong." | { ...; } | Promise<...> | undefined'.
      Target signature provides too few arguments. Expected 2 or more, but got 1.
  Overload 2 of 2, '(action: (state: "Invalid Credentials" | "Something went wrong." | { error: ZodError<{ email: string; password: string; }>; } | undefined, payload: FormData) => "Invalid Credentials" | "Something went wrong." | { ...; } | Promise<...> | undefined, initialState: "Invalid Credentials" | ... 2 more ... | undefined, permalink?: string | undefined): [state: ...]', gave the following error.
    Argument of type '(prevState: string | undefined, formData: FormData) => Promise<"Invalid Credentials" | "Something went wrong." | { error: ZodError<{ email: string; password: string; }>; } | undefined>' is not assignable to parameter of type '(state: "Invalid Credentials" | "Something went wrong." | { error: ZodError<{ email: string; password: string; }>; } | undefined, payload: FormData) => "Invalid Credentials" | "Something went wrong." | { ...; } | Promise<...> | undefined'.
      Types of parameters 'prevState' and 'state' are incompatible.
        Type '"Invalid Credentials" | "Something went wrong." | { error: ZodError<{ email: string; password: string; }>; } | undefined' is not assignable to type 'string | undefined'.
          Type '{ error: z.ZodError<{ email: string; password: string; }>; }' is not assignable to type 'string'.ts(2769)

after creating the auth-merge branch and resetting the commits to have one 
clean commit go into dev then main, i got the following error in the browser 
after trying to sign in a new user. I got the credentials wrong, then tried again 
and the browser showed the following build error. 
next time I'll make sure to copy the build stack as well 

TypeError: originalFactory is undefined

i was unable to recreate the error. I looked it up and didn't find anything useful 

i ran npm i just to see if it was a module thing since i had merged a bunch of commits 
into the dev branch. it didn't show any updates or changes. I tried again and wasn't able 
to recreate it. I went ahead and merged to main. there were no build errors in main, 
or any of the preview deployments for the dev, auth, or register-user branches 

in the client i was getting the ClientFetchError: Unexpected token '<', "<!DOCTYPE "... is not valid JSON
which means my function was expecting JSON and received HTML. 
The reason I was getting html was because I was getting receiving a 404 page not found but I wasn't 
handling the error correctly. GET /api/auth/session 404 was in the server logs. 
i was getting a 404 when using await auth() in a layout because that was an asynchronous call in a 
synchronous component which is why I kept getting null sessions. 
- copilot 
i am working on implementing authentication and protected routes in my nextjs app. In my profile page, 
I import auth from "@auth" and I use 'const session = await auth();' to get the session. When I move this to the layout.tsx, 
I get the a 404 error form auth(). Why doesn't await auth() work in the layout?
The issue you're facing is due to the fact that you're trying to use an asynchronous operation (await auth()) inside a 
synchronous React component (MainLayout). React components are synchronous and cannot be made asynchronous with async.

In React, data fetching should be done in specific lifecycle methods or hooks. For functional components, you can 
use the useEffect hook for side effects, including data fetching. However, useEffect runs after the component has been rendered, 
so it's not suitable for fetching authentication status before rendering the component.

In Next.js, you can use getServerSideProps or getInitialProps for server-side data fetching, but these can only be used in 
page components, not in layout or other regular components.

If you want to fetch the session data in the layout component, you can use the useSession hook from next-auth/react. 
This hook returns an object with data and status properties. The data property contains the session data if a session exists, 
and status indicates the loading state of the session data.

- The error message "TypeError: updateSelections is not a function" typically means that the updateSelections prop is either not being passed to the child component or it's being overwritten somewhere in the child component.

Here are a few things you can check:

Ensure that updateSelections is being passed down to each child component correctly. In each component where you're passing updateSelections as a prop, make sure you're passing it like this: <ChildComponent updateSelections={updateSelections} />.

Check that updateSelections is not being overwritten in any of the child components. If there's any other prop or variable in the child component with the same name, it could be overwriting the updateSelections prop.

Make sure that you're not calling updateSelections in a place where it could be undefined. For example, if you're calling updateSelections in a lifecycle method or a callback that gets executed before the component receives the updateSelections prop, it could be undefined at the time it's called.

Add some console logs to check the value of updateSelections in each component. This can help you figure out where it's becoming undefined or not a function.

- common fix - hook is being used in a server component. include the 'use client' directive at the top of the component to get rid of this error 