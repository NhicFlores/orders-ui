adding a new fetch feature 
stub in page 
stub in component 
buttons in datatable and columnst tsx 
create a corresponding action 
create a corresponding object for receiving data from db query 
test 
add error handling 
add all required fields 

updating an order 
	create new dynamic route segment with the order id 
	read the order id from the page params 
	fetch the specific order from db 
	pre-populate the form with the order data 
	update the order data in db  

creating new order form
new 'create' route in orders folder 
    'create' folder with page.tsx

    import Form from '@/app/ui/order/create-form';
import Breadcrumbs from '@/app/ui/order/breadcrumbs';
import { fetchCustomers } from '@/app/lib/data';
 
export default async function Page() {
  const customers = await fetchCustomers();
  //customers for dropdown menu 
  return (
    <main>
      <Breadcrumbs
        breadcrumbs={[
          { label: 'Orders', href: '/dashboard/orders' },
          {
            label: 'Create Order',
            href: '/dashboard/orders/create',
            active: true,
          },
        ]}
      />
      <Form customers={customers} />
    </main>
  );
}


using Context 
Defining update functions within the ProductContextProvider like updateOrderItemQuantity 
does not inherently change how the state functions behave. 
However, it does offer several benefits and considerations:

Encapsulation: By defining update functions within the context provider, you encapsulate the logic for 
updating state in a specific way. This can make the component more readable and maintainable, as the 
logic for how state should be updated in response to certain actions is kept close to where the state is defined.

Reusability: These functions can be passed down through context and reused in multiple components. 
This avoids duplication of state update logic across components.

Performance: Using a function like setOrderItem((prev) => ({...prev, quantity: quantity})) ensures that the update
 is based on the previous state, which is important for avoiding stale state issues in asynchronous operations. 
 It's a pattern encouraged by React for updates that depend on the current state.

Consistency: It helps in maintaining consistency across your application. When all state updates follow a similar pattern,
 it's easier for other developers (or yourself in the future) to understand and work with the code.

Flexibility: If the logic for updating state becomes complex, having it encapsulated in a function makes it easier to modify
 or extend the logic without affecting the components that use it.

In summary, while the underlying behavior of the state functions (useState, setState) doesn't change, organizing your state 
update logic into dedicated functions within your context provider can significantly improve the maintainability, readability, and reusability of your code.

Drizzle schema update: 

when updating the drizzle schema, such as adding a column, changing a column's type, or 
adding a whole table, that change has to be reflected in other parts of the code. 

  - update corresponding definitions in schema-definitions.ts 
  - update zod schemas 
  - update queries and server actions 
  - if still working with placeholder data, updated 
    data generating functions and seeding queries 
  
after making schema changes, 
  - generate new migration 
  - run migration against correct database 

generating data 
  update drizzle schema 
  update typescript definitions 
  drop old migrations 
  generate new migrations 
  run new migrations 
  update generating functions 
  update paths in generating functions 
  update seeding functions 
  run seeding functions  
  - update production schema, production seeding functions 
  - update corresponding zod schema 


forms 
- define type in definitions 
- update drizzle schema if necessary 
- zod schema 
- state variables 
- server actions 
- data validation 