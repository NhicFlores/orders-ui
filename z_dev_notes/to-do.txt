NEXT 
X fetch for drafts, quotes 
X pages, routes for drafts, quotes 
X configure table for drafts/quote client view

auth 
	-register and login routes 
		-layout for styling and positioning 
	-register and login forms 
		-card component to hold form fields 
		-styling wrapper to pass styling and props to login and register cards 
		-forms will be similar - eventually can refactor into single form with conditional rendering 
			-this would probably require context which adds complexity and may reduce reusability, 
			so just keeping the two separate components is probably the better option 
	-data schema 
	-form validation 
	-submit handling 

create user profile 
	- page, routes
		new profile 
		edit profile 
			cache locally or fetch - depends on the amount of data 
				- static rendering is probably okay since it doesn't get updated often
				- if we need to cut the size of the bundle, we can cut the profile data 
				but keep data necessary for ordering - shipping etc, or fetch when 
				new order is clicked since that form will be statically rendered    
		input fields and forms 
			component profile folder will contain client side components 
		form validation 
			zod schema - make folder for all schema or a schema file for each form 
				forms are going to be under components 
			form status - pending, loading 
		edit button toggle -> save button  
	- fetch function 
	- update, insert, delete server actions 
		this is from client perspective: create one profile for yourself 
	-update user table in db 
		update fields and types 
	- consider one customer can have many users - keep many user_ide with email and password attached to 'customers' which stores company, shipping, billing, etc 
		this won't work(smoothly) in the case that different users at different companies handle orders for different work sites
		maybe we need user, company, and customer to allow for user to choose default order information 

definitions for table entities separate definitions into multiple files  
	users need updated 
	products need created 

change status to a client side read only field 

define data fetching pattern - server actions
form submission pattern - allow for inline editing 

Low Priority 
choose license 

import icons  
font awesome 
ant design 
lucide react

New Order 
	form: saving info -> output order format 
	buttons on new order page- finish later, next, and submit buttons should do the same thing just storing different tags 

styling
maybe find some pictures to put in the background 


definitions.ts - data types for tables:; customers 
    draft table everything nullable - no draft table - just a status on an order 

server components 
   can reuse other components: change data types 


deleting items: should have a deleted folder (and table) that will hold onto stuff for like 15 days or something 
archiving items to clean out historical data from current: ex. past customers - dont want to delete them but 
we don't need them in working data 

global definitions for paths to consolidate them and avoid spelling errors 

Loose project structure (will require some refactoring) 
	• App 
		○ Landing page and layout 
		○ Routing and navigation modules 
			§ Page and shared layouts for forms 
		○ Ui 
			§ Stylized local components 
	• Styles 
		○ Font definitions 
		○ Default style definitions 
	• Components 
		○ Headless, global components 
			§ Table, button, dropdown etc 
	• Lib
	• Schema  
	
Global utils 

future functionality 
-updating profile fields 
for updating single fields, each field needs an edit button.
once clicked, the edit button makes the readonly field editable and a save button appears
when save is hit, button passes user_id and updated field to sql query and updates single field 
should probably enable editing all fields, and save button takes all changed fields 

-adding shipping addresses 
add shipping address should be its own button, and shipping adresses are titled and selectable 
from new order form 
address table may be necessary but we'll try to avoid that 

-use tooltips to see details when hovering over table like seeing the custoomer id when 
hovering on customer name 