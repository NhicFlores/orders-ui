---------------------------------------- NEXT ---------------------------------------- 
- check for UNDO's before commit and merge 

- how to connect to azure db 

- make dimension select elements 'required' <select required/>

role base access: 
- use SSR to check for access and dynamically fetch data and components 
- admin nav: uses hook to check user role; middleware also checks for user role  
	- side bar 
		- customer table  
			- customer page with order and invoice summaries, 
		- invoice table 
		- product page, table that allows for editing 

08-26 
- clean up build errors : remove references to 'customer' as a type 
	stubbed in empty customer arrays 
- run migrations against vercel db 
	- use db: push on local db 
	- once changes to schema are finalized, generate migration and run against vercel db 
08-27
- update fetch queries to use updated types and references 

- admin portal for viewing aggregate data 


NEXT 

- on checkout 
	-x- when payment or shipping are chosen, expand the form populated with data 
	from the chosen object 
	- when 'same as billing address' checkbox is checked, the shipping form 
	is expanded and populated with the corresponding data 
		- pull the data from the order context object 
- refactor schemas into more discrete, un-nested objects 
-x research: refactor product order route into multi-step form?
	- no need right now, it would just add more redundant code since 
		everything would stay the same except each product page would also 
		need to be wrapped by the form 
		- this might be enough reason to make a generic form wrapper down the line 
	- the validation on order submission is enough 


- new order 
 - new order definitions
   - context definitions, type definitions 
   - new order table  	
    - sql script 
 - new order actions 

- data validation and sanitization 
client side and server side validation for all inputs 

SummaryCard 
- format order summary 
- hook up save and submit buttons to server actions 
- take screenshots of component with different types of 
formatting so we can choose our implementation 

Solutions for live summary card update 
- react state, react context 
	- passing props to children from layout to pages in route group 
	- product layout to all product pages to show live summary 

table for billing info and shipping info 
	- reusable table 
	- expandable row 
	- server actions 

- submit order with summary card 
	- state management, context management
	- pass callback function from layout to child components 
	- use glass config object 

- profile route 
	- models: profile, billing, shipping, address, user  
		- revise models, create tables 
	- create server actions for each model: create, update, delete 
		- form schemas 
	- data fetching functions 
	- forms, and pages 
		- edit buttons 
		- layout and styling 

- resolve session provider issue 
	- can't be in layout since it doesn't rerender 
	https://nextjs.org/docs/app#not-planned-features 
	- can't be in client component because client components can't be asynchronous 

styling 
- create reusable containers for components and pages 
- make product pages responsive 
	- hidable sheet for navigation 
- hidable sheet for header for the whole app 

products 
- selectable cards x
- descriptions 
- conditional availability based on previous selections 
	- state management for conditional rendering 
	- or check specification string build 
		- if specs.contains('') render from this product array 
- selectable edges - low priority 
- continue and back buttons 
- forms and submit button 
- the save button which submits is tagged as a draft 
- when an order is initiated, it has a default status of DRAFT 
- product form and submit button 
	- submit button is the add to order button 
	- onclick it updates the current draft 
then we need the order button on the summary card 
	- on submit this button changes the status and updates the created at date 
	- drafts have a created at date useful for sorting, but once submitted, that date 
	is changed to the date ordered  because that is what's needed on an order 
- we need a product container 
	- this container renders the product cards dependent on the product arrays 
	each card has a title, image, description, and add to order button 
	- might be better to just make the cards selectable with radio buttons or something and have 
	a continue button 
	- the continue button, or the add to order button, whichever i decide to implement, 
	will update the draft, the specification string, and change the products listed 
	- instead of changing the products it could route to the next page but that complicates 
	state management 
	- call three parallel functions that all take the same parameter: 
		- server action to edit draft 
		- edit specification string 
		- render next products
			- if current selection == some type then product array = next products 
			- use state: setProductArray(nextProducts) 
- on click or product select 
	- handle product click -> add product to specification string 

possible strategy for building glass config 
- each page has a form with the continue button as the submit 
	- render different components based on the page 
	- need a component wrapper that is a form 
	- we pass the other cards like the product grids and dimension cards 
	<ProductSelect>
		<ProductGrid/> 
	</ProductSelect>
- use state management in parent component 




images 
- where to store product images 
- fetch product images 
	- dispatch function when they select new order 
	- get the product images first, then get the shape, color, etc, in the background 

db 
- update product models 
- update tables 
	- shapes 
		- each shape needs to have required dimensions associated with it 
    	- each dimension needs label and options array 
- create queries and server actions 
https://docs.oracle.com/en/database/oracle/oracle-database/18/sqlrf/SQL-JSON-Conditions.html#GUID-35C7012D-FCDB-4106-88C1-CABA78326896 
https://stackoverflow.com/questions/56335674/sql-query-with-join-to-get-nested-array-of-objects 




data table 
expandable row 
	- on expand 
		- also show the buttons from the 'more ellipse': edit, copy, view customer, etc to make it easier to navigate 
	- limit to 10 at a time, 
	- default to order by recent activity, 
	- add column for load date 
	- maybe some highlighting based on date calc for admin side 
		- green when the difference between load date and current date is greater than 5 and the status is processing or fab 
		- yellow then status is needs ordered 
		- red when difference is less than five 
		- we'll work out the business logic when we get there 


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx LOW PRIORITY/OPTIMIZATIONS xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
- how do conflicting layouts resolve 
- nav bar should be part of the full screen height to avoid the scroll bar 

- on admin side - tooltip to show product code so they see exactly what was sent to the 
back end - this will help determine errors in orders and inventory 

default values 
order name should default to UnNAMED DRAFT 
form at the end for naming it

get the content to take a minimum height of screen minus the height of the top nav bar 

find all places where i use nested Link/Button for navigation and use the asChild prop for the button 


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx DONE xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

forms: 
	shipping form 
	- shipping info table
	- delete shipping info objects 

tables: 

auth 
- designate roles 
- lock routes by role 
	- use parallels routes - use Slots (@adminDashboard) to conditionally render 
	https://nextjs.org/docs/app/building-your-application/routing/parallel-routes 

-pick an auth provider for production - authjs/nextauth, iron-session,  lucia auth 
	-session manager 
	-account creation / registration 
	-email verification 
	-forgot password workflow 
	https://lucia-auth.com/getting-started/nextjs-app 
	https://github.com/vvo/iron-session 


profile 
	- since this will see minimal updates from user, we can render it statically and in the background, on sign in, 
	check if there are updates in the db in case they use multiple devices 
	- since it needs minimal editing and viewing, it might also be worth deprioritizing and fetching in the background to minimize 
	load times and prioritize orders 
	- large user object with nested profile vs discrete, minimally nested objects 
	- fetch profile by user id function 
	- same for billing and shipping info 
	- add company field to user profile 
billing form and route 
	- href of billing and address tab in user dropdown 
	- billing and address forms 
	- separate billing and address tables vs nested profile objects 
	- create sql script for creating and inserting values in table 
		- use jsonb type for nested objects with nullable values 

create user profile 
	- page, routes
		new profile 
		edit profile 
			cache locally or fetch - depends on the amount of data 
				- static rendering is probably okay since it doesn't get updated often
				- if we need to cut the size of the bundle, we can cut the profile data 
				but keep data necessary for ordering - shipping etc, or fetch when 
				new order is clicked since that form will be statically rendered    
		input fields and forms 
			component profile folder will contain client side components 
		form validation 
			zod schema - make folder for all schema or a schema file for each form 
				forms are going to be under components 
			form status - pending, loading 
		edit button toggle -> save button  
	- fetch function 
	- update, insert, delete server actions 
		this is from client perspective: create one profile for yourself 
	-update user table in db 
		update fields and types 
	- consider one customer can have many users - keep many user_ide with email and password attached to 'customers' which stores company, shipping, billing, etc 
		this won't work(smoothly) in the case that different users at different companies handle orders for different work sites
		maybe we need user, company, and customer to allow for user to choose default order information 


order config 
component tree 
product route - start with conditional rendering then extract to pages 
layout 
	- product header 
		- title, back route, continue route 
	- product navigation on left 
		- stack of buttons with corresponding titles 
		- maybe dropdowns with the options so people can go back and see 
		- low priority 
			- it will probably just have to erase any subsequent selections 
			so we don't have issues with incompatible products and options 
	- product grid center 
		- product form 
			- product card 
				- name 
				- image 
				- description 
			- specification card - dimensions and edgework can use this 
				- instructions 
				- diagram and labels 
				- user input 
					- label corresponding to dimension 
					- dropdowns populated with arrays of possible values for length and fractions of inches 
			- continue button 
			- finish later button 
			- back button 
	- summary on right 
		- based on certain selections 
			- adding this selection will require a quote for accurate pricing 
		- summary order form 

product config 
 - payment and shipping pages in order flow 
 - tables showing payment and shipping options 

- submit dimensions to product specs 
 - function to unwrap context in dimension page 
 - validate data 
 - format string for display 


data tables 
 - order route 
	- page and layout 
 - order table 
	- update db 
	- fetch function 
	- column definitions
	- status filter 
	- column sort  
	- new order button 
	- pagination 
 - fetch for drafts, quotes 
 - pages, routes for drafts, quotes 
 - configure table for drafts/quote client view
auth 
 - need to restructure routes under (protected) folder 
 - move page and layout into protected route 
 - create landing page with sign in button 
 - restructure the route groups so you can handle the protected routes 
 - landing page is just a button with some styling 
 - create a folder called home for the main page with 3 button stack 
	- how do we pass the nav bar around if their is a home route 
	but the subsequent pages are not part of the home routing group 
	- layout for all routes under (protected)
 - create routes.ts file in root
 - verify login x
	- add register action x 
	- error messages for login and register forms x 
	- form validation for login form 
		- refactor signIn callback in auth.config 
		- to get a different error message from the 
		callback we need to define our own error type 
	- logout 
		- button x 
		- function 
		- routing  
- start with nextauth X
-register and login routes X
	-layout for styling and positioning X
-register and login forms X
	-card component to hold form fields X
	-styling wrapper to pass styling and props to login and register cards X
-forms will be similar - eventually can refactor into single form with conditional rendering 
	-this would probably require context which adds complexity and may reduce reusability, 
		so just keeping the two separate components is probably the better option 
-data schema X
-form validation X
-submit handling X

- auth.ts, auth.config.ts, middleware.ts, routes.ts x
- protected routes logic x
	- middleware.ts x
		- regex for filtering routes to invoke middleware x
		- regex from clerk for protecting all routes by default x
- authorize callback x 
- auth providers - credentials x

profile 
 - profile form and route
 - update model   
 - form validation 
product 
 - order item definitions 
register 
	- create new users -> server action x
	- passwords match check x
log in 
	- need user look up function async and redirect to homepage x
	- implement authorization  
	- protected routes x
Sign in ROLES 
- create user roles x
- modify session and tokens to have id and role accessible x 
- getUserById function x 

models 
- move name field to profile instead of auth 

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 

definitions for table entities separate definitions into multiple files  
	users need updated 
	products need created 

change status to a client side read only field 

define data fetching pattern - server actions
form submission pattern - allow for inline editing 

Low Priority 
choose license 

import icons  
font awesome 
ant design 
lucide react

New Order 
	form: saving info -> output order format 
	buttons on new order page- finish later, next, and submit buttons should do the same thing just storing different tags 

styling
maybe find some pictures to put in the background 


definitions.ts - data types for tables:; customers 
    draft table everything nullable - no draft table - just a status on an order 

server components 
   can reuse other components: change data types 


deleting items: should have a deleted folder (and table) that will hold onto stuff for like 15 days or something 
archiving items to clean out historical data from current: ex. past customers - don't want to delete them but 
we don't need them in working data 

global definitions for paths to consolidate them and avoid spelling errors 

Loose project structure (will require some refactoring) 
	• App 
		○ Landing page and layout 
		○ Routing and navigation modules 
			§ Page and shared layouts for forms 
		○ Ui 
			§ Stylized local components 
	• Styles 
		○ Font definitions 
		○ Default style definitions 
	• Components 
		○ Headless, global components 
			§ Table, button, dropdown etc 
	• Lib
	• Schema  
	
Global utils 

ooooooooooooooooooooooooooooooooooo future functionality ooooooooooooooooooooooooooooooooooo

-dev tab available to admins for adding tasks and questions  

-updating profile fields 
for updating single fields, each field needs an edit button.
once clicked, the edit button makes the readonly field editable and a save button appears
when save is hit, button passes user_id and updated field to sql query and updates single field 
should probably enable editing all fields, and save button takes all changed fields 

-adding shipping addresses 
add shipping address should be its own button, and shipping addresses are titled and selectable 
from new order form 
address table may be necessary but we'll try to avoid that 

-use tooltips to see details when hovering over table like seeing the customer id when 
hovering on customer name 